# -*- coding: utf-8 -*-
"""Prophet_Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Je3Ka2PGLBnb5d0cJ5lbwLG9oDsDXw9R

---
## Using FB Prophet

Project Goals

- Find unusual patterns in Google search traffic

- Mine search traffic data for seasonality

- Relate search traffic to stock price patterns

- Create time series model with Prophet

- Forecast revenue by using time series models
"""

# Install the required libraries
!pip install pystan
!pip install pystan~=2.14
!pip install fbprophet
!pip install hvplot
!pip install holoviews
import seaborn as sn

# Commented out IPython magic to ensure Python compatibility.
# Import the required libraries and dependencies
import pandas as pd
from fbprophet import Prophet
import holoviews as hv
import hvplot.pandas
import datetime as dt
# %matplotlib inline

"""---
Find Unusual Patterns in Google Search Traffic (hourly)

"""

# Upload "google_hourly_search_trends.csv", then store in a DF

from google.colab import files
uploaded = files.upload()

# Set "Date" as the Index.

df_trends = pd.read_csv(
      "google_hourly_search_trends.csv",
      index_col='Date',
      parse_dates=True,
      infer_datetime_format=True,
).dropna()

# Review the DF
display(df_trends.head())
display(df_trends.tail())

# Review data types
df_trends.info()

# Holoviews extension
hv.extension('bokeh')

# Slice DF for just May 2020
df_may_2020 = df_trends["2020-05-01":"2020-05-31"]

# Plot
df_may_2020.hvplot()

# Calculate sum of the total search traffic for May 2020
traffic_may_2020 = df_may_2020["Search Trends"].sum()

# View the traffic_may_2020 value
traffic_may_2020

# Calcluate monhtly median search traffic
median_monthly_traffic = df_trends["Search Trends"].groupby(by=[df_trends.index.year, df_trends.index.month]).sum().median()

# View the median_monthly_traffic value
median_monthly_traffic

# Compare seach traffic in May 2020 to overall monthly median

print(f"May 2020's Median Search Trafic was {traffic_may_2020}")
print(f"The Average Monthly Median Search Trafic was {median_monthly_traffic}")

print(f"May 2020's median monthly value was greater by {traffic_may_2020 - median_monthly_traffic}")

# Holoviews extension
hv.extension('bokeh')

# Group hourly search data to plot avg traffic by day of week 
daily_trends = df_trends["Search Trends"].groupby(by=[df_trends.index.dayofweek]).mean()

daily_trends.hvplot()

# Holoviews extension
hv.extension('bokeh')

# Use heatmap for day of week search traffic.
df_trends.hvplot.heatmap(y = 'Date.dayofweek', x='Date.hour', ylabel = 'Day of Week', xlabel = 'Hour of day', C='Search Trends', title = 'Heatmap of Daily / Hourly Search Traffic')

# Holoviews extension
hv.extension('bokeh')

# Group hourly search data for avg traffic by the week of year
weekly_traffic = df_trends["Search Trends"].groupby(by=[df_trends.index.weekofyear]).mean()

weekly_traffic.plot()

# Upload the stock price file and store in DF
from google.colab import files
uploaded = files.upload()

# Set the "date" column as the Datetime Index.

df_stock = pd.read_csv(
      "stock_price.csv",
      index_col='date',
      parse_dates=True,
      infer_datetime_format=True,
).dropna()

# View the first and last five rows of the DataFrame
display(df_stock.head())
display(df_stock.tail())

# Holoviews extension
hv.extension('bokeh')

# Visualize Closing price data
df_stock["close"].hvplot()

# Concatenate stock DataFrame trends DataFrame
stock_trends = pd.concat(([df_stock, df_trends]), axis = 1).dropna()

# View the first and last five rows of the DataFrame
display(stock_trends.head())
display(stock_trends.tail())

# For combined DF, slice for the first half of 2020 (2020-01 through 2020-06) 
first_half_2020 = stock_trends["2020-01-01":"2020-06-30"]

# View the first and last five rows of first_half_2020 DataFrame
display(first_half_2020.head())
display(first_half_2020.tail())

# Holoviews extension
hv.extension('bokeh')

# Visualize the close and Search Trends data
first_half_2020.hvplot(shared_axes=False, subplots=True).cols(1)

# Create new column that shifts the Search Trends information by one hour

stock_trends['Lagged Search Trends'] = stock_trends['Search Trends'].shift(1)

stock_trends.head()

# Create new column that calculates the standard deviation of the closing stock price return data over a 4 period rolling window

stock_trends['Stock Volatility'] = stock_trends["close"].rolling(4).std()

stock_trends

# Holoviews extension
hv.extension('bokeh')

# Use hvPlot to visualize stock volatility
stock_trends['Stock Volatility'].hvplot()

# Create new column to calculate hourly return percentage of the closing price

stock_trends['Hourly Stock Return'] = stock_trends["close"].pct_change()

# View the first and last five rows of the mercado_stock_trends_df DataFrame

display(stock_trends.head(5))
display(stock_trends.tail(5))

# Construct correlation table of Stock Volatility, Lagged Search Trends, and Hourly Stock Return

corrMatrix = stock_trends[["Lagged Search Trends", "Stock Volatility", "Hourly Stock Return"]].corr()
sn.heatmap(corrMatrix, annot=True)

# Reset the index
prophet_df = df_trends.reset_index()

# Label the columns ds and y
prophet_df.columns = ['ds', 'y']

# Drop an NaN values
prophet_df = prophet_df.dropna()

# View the first and last five rows
display(prophet_df.head(5))
display(prophet_df.tail(5))

# Call Prophet function, store as an object
model_trends = Prophet()

# Fit time-series model.
model_trends.fit(prophet_df)

# Create future DF to hold predictions
future_trends = model_trends.make_future_dataframe(periods=2000, freq='H')

# View the last five rows
display(future_trends.tail(5))

# Make predictions for the trend data
forecast_trends = model_trends.predict(future_trends)

# Display the first five rows 
display(forecast_trends.head(5))

# Plot Prophet predictions
model_trends.plot(forecast_trends)

# Set index to the ds datetime column
forecast_trends = forecast_trends.set_index("ds")

# View yhat,yhat_lower and yhat_upper columns only
forecast_trends[["yhat", "yhat_lower", "yhat_upper"]].head()

# Holoviews extension
hv.extension('bokeh')

# Visualize
forecast_trends[['yhat', 'yhat_lower', 'yhat_upper']].iloc[-2000:,:].hvplot()

from fbprophet.plot import plot_components

# Reset index in the forecast_trends DataFrame
forecast_trends = forecast_trends.reset_index()

# Visualize the forecast results 
figures_trends = model_trends.plot_components(forecast_trends)

# Upload "daily_revenue.csv" and store in DF

from google.colab import files
uploaded = files.upload()

# Set "date" column as DatetimeIndex
df_sales = pd.read_csv(
      "daily_revenue.csv",
      index_col='date',
      parse_dates=True,
      infer_datetime_format=True,
).dropna()

# Review DF
df_sales.head()

# Holoviews extension
hv.extension('bokeh')

# Visualize daily sales 
df_sales["Daily Sales"].hvplot()

# Apply FB Prophet model.

# Reset index so date becomes column
sales_prophet_df = df_sales.reset_index()

# Adjust columns names
sales_prophet_df.columns = ['ds', 'y']

# Visualize DF
sales_prophet_df.head()

# Create model
sales_prophet_model = Prophet()

# Fit model
sales_prophet_model.fit(sales_prophet_df)

# Predict sales for 1 quarter into future.
sales_prophet_future = sales_prophet_model.make_future_dataframe(periods=3400, freq='H')

# Display the last five rows
display(sales_prophet_future.tail(5))

# Make predictions sales each day over the next quarter
sales_prophet_forecast = sales_prophet_model.predict(sales_prophet_future)

# Display the first 5 rows
display(sales_prophet_forecast.head(5))

# Analyze with plot_components function

sales_prophet_components = sales_prophet_model.plot_components(sales_prophet_forecast)

# Holoviews extension
hv.extension('bokeh')

# Plot the predictions for Sales
sales_prophet_forecast[['yhat', 'yhat_lower', 'yhat_upper']].hvplot()

# Set the ds column as Index
sales_prophet_forecast = sales_prophet_forecast.set_index("ds")

# Display the first and last five rows
display(sales_prophet_forecast.head(5))
display(sales_prophet_forecast.tail(5))

# Create sales forecast for next quarter
sales_forecast_quarter = sales_prophet_forecast[['yhat', 'yhat_lower', 'yhat_upper']].loc['2020-07-01':'2020-09-30']
sales_forecast_quarter = sales_forecast_quarter.rename(columns={"yhat": "most likely", "yhat_lower": "worst case", "yhat_upper": "best case"})

# Review the last five rows of the DataFrame
sales_forecast_quarter.tail(5)

# Display summed values for all rows in DF

sales_forecast_quarter.sum()